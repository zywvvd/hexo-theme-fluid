<%
page.layout = "earth_sta"
page.title = theme.links.title || __('earthsta.title')
page.subtitle = theme.links.subtitle || __('earthsta.subtitle')
page.banner_img = theme.links.banner_img
page.banner_img_height = theme.links.banner_img_height
page.banner_mask_alpha = theme.links.banner_mask_alpha
page.comment = theme.links.comments.type
%>

<style type="text/css">
.banner {
  height: 0px;
  position: relative;
  overflow: hidden;
  cursor: default;
}

.header-inner{
  height: 60vh;
}

.earth_title{
  height: 10vh;
  color: #fff;
  text-align: center;
}

.earth_word{
  font-size: 2.15rem;
  text-align: center;
  vertical-align: center;
  margin: 10px;
}

.footer-inner {
    padding: 0rem 0 1rem 0;
    text-align: center;
}
</style>



<div class="earth_title">
	<div class="earth_word">
		30天内的来访者
	</div>
	〇&nbsp 历史来访者 &nbsp&nbsp&nbsp  <span style="color:#F33">〇</span>&nbsp 当前来访者
</div>

<div id='fatherobj3'>
    <canvas id='quakeCanvas3'></canvas>
</div>

<script type='text/javascript' src='https://101.43.39.125/HexoFiles/js/planetaryjs/d3.v3.min.js'></script>
<script type='text/javascript' src='https://101.43.39.125/HexoFiles/js/planetaryjs/topojson.v1.min.js'></script>
<script type='text/javascript' src='https://101.43.39.125/HexoFiles/js/planetaryjs/planetaryjs.min.js'></script>
<script type='text/javascript' src='https://101.43.39.125/HexoFiles/js/planetaryjs/moment.min.js'></script>
<script>
(function() {
  var canvas = document.getElementById('quakeCanvas3');
  var board_obj = document.getElementById('fatherobj3');
  
  var header_obj = document.getElementsByClassName('header-inner');
  header_obj = header_obj[0];
  
  header_obj.style.cssText = "height: 9vh;";
  var temp_board_obj = document.getElementById('board');
  temp_board_obj.style.cssText = "background-color: rgba(0,0,0,0);box-shadow:0 12px 15px 0 rgb(0 0 0 / 0%), 0 17px 50px 0 rgb(0 0 0 / 0%);width:100%;"
  
  var real_mask_obj = document.getElementsByClassName('real_mask');
  real_mask_obj = real_mask_obj[0]
  real_mask_obj.style.cssText = "background-color: rgba(0,0,0,0.8);z-index: -777;height: 100%;position: fixed;width: 100%;"
  
  var body_height = document.body.clientHeight;
  var body_width = document.body.clientWidth;
  body_width = body_width * 0.8;
  
  var real_container_obj = document.getElementsByClassName('container');
  for (var i = 0; i < real_container_obj.length; i++) {
    var temp = real_container_obj[i];
	temp.style.cssText = "max-width:" + body_width.toString() + "px;";
  }
 
  var real_col_obj = document.getElementsByClassName('col-md-10');
  for (var i = 0; i < real_col_obj.length; i++) {
    var temp = real_col_obj[i];
	temp.style.cssText = "max-width:100%;";
  }
  
  // Create our Planetary.js planet and set some initial values;
  // we use several custom plugins, defined at the bottom of the file
  var planet = planetaryjs.planet();
  planet.loadPlugin(autocenter({extraHeight: -120}));
  planet.loadPlugin(autoscale({extraHeight: -120}));
  planet.loadPlugin(planetaryjs.plugins.earth({
    topojson: { file:   'https://101.43.39.125/HexoFiles/js/planetaryjs/world-110m.json' },
    oceans:   { fill:   '#001320' },
    land:     { fill:   '#06304e' },
    borders:  { stroke: '#001320' }
  }));
  planet.loadPlugin(planetaryjs.plugins.pings());
  planet.loadPlugin(planetaryjs.plugins.zoom({
    scaleExtent: [50, 5000]
  }));
  planet.loadPlugin(planetaryjs.plugins.drag({
    onDragStart: function() {
      this.plugins.autorotate.pause();
    },
    onDragEnd: function() {
      this.plugins.autorotate.resume();
    }
  }));
  planet.loadPlugin(autorotate(5));
  planet.projection.rotate([250, -20, 0]);
  planet.draw(canvas);
	var httpRequest = new XMLHttpRequest();
	httpRequest.open('GET', 'https://uipv4.zywvvd.com:33037/planet_info', true);
	httpRequest.setRequestHeader("Content-type","application/json");
	httpRequest.send("");
	httpRequest.onreadystatechange = function () {//请求后的回调接口，可将请求成功后要执行的程序写在其中
		if (httpRequest.readyState == 4 && httpRequest.status == 200) {//验证请求是否发送成功
			var testJson = httpRequest.responseText;//获取到服务端返回的数据
            testJson = $.parseJSON(testJson);
              // Create a color scale for the various earthquake magnitudes; the
              // minimum magnitude in our data set is 2.5.
              var colors = d3.scale.pow()
                .exponent(3)
                .domain([1, 2, 3, 8, 10])
                  .range(['white', 'white', 'red', 'red', 'purple']);
              // Also create a scale for mapping magnitudes to ping angle sizes
              var angles = d3.scale.pow()
                .exponent(3)
                .domain([2.5, 10])
                .range([0.5, 15]);
              // And finally, a scale for mapping magnitudes to ping TTLs
              var ttls = d3.scale.pow()
                .exponent(3)
                .domain([2.5, 10])
                .range([2000, 5000]);
                // Create a key to show the magnitudes and their colors
              d3.select('#magnitudes').selectAll('li')
                .data(colors.ticks(9))
              .enter()
                .append('li')
                .style('color', colors)
                .text(function(d) {
                  return "Magnitude " + d;
                });
                d3.json('https://101.43.39.125/HexoFiles/js/planetaryjs/year_quakes_small.json', function(err, data) {
                if (err) {
                  alert("Problem loading the quake data.");
                  return;
                }
                data = testJson;
                var start = parseInt(data[0].time, 10);
                var end = parseInt(data[data.length - 1].time, 10);
                var currentTime = start;
                var lastTick = new Date().getTime();
                var updateDate = function() {
                  d3.select('#date').text(moment(currentTime).utc().format("MMM DD YYYY HH:mm UTC"));
                };
                // A scale that maps a percentage of playback to a time
                // from the data; for example, `50` would map to the halfway
                // mark between the first and last items in our data array.
                var percentToDate = d3.scale.linear()
                  .domain([0, 100])
                  .range([start, end]);
                // A scale that maps real time passage to data playback time.
                // 12 minutes of real time maps to the entirety of the
                // timespan covered by the data.
                var realToData = d3.scale.linear()
                  .domain([0, 1000 * 60 * 12])
                  .range([0, end - start]);
                var paused = false;
                // Pause playback and update the time display
                // while scrubbing using the range input.
                d3.select('#slider')
                  .on('change', function(d) {
                    currentTime = percentToDate(d3.event.target.value);
                    updateDate();
                  })
                  .call(d3.behavior.drag()
                    .on('dragstart', function() {
                      paused = true;
                    })
                    .on('dragend', function() {
                      paused = false;
                    })
                  );
                // The main playback loop; for each tick, we'll see how much
                // time passed in our accelerated playback reel and find all
                // the earthquakes that happened in that timespan, adding
                // them to the globe with a color and angle relative to their magnitudes.
                d3.timer(function() {
                  var now = new Date().getTime();
                  if (paused) {
                    lastTick = now;
                    return;
                  }
                  var realDelta = now - lastTick;
                  // Avoid switching back to the window only to see thousands of pings;
                  // if it's been more than 500 milliseconds since we've updated playback,
                  // we'll just set the value to 500 milliseconds.
                  realDelta = 5000;
                  var dataDelta = realToData(realDelta);
                  var toPing = data.filter(function(d) {
                    return d.time >= currentTime && d.time <= currentTime + dataDelta;
                  });
                  for (var i = 0; i < toPing.length; i++) {
                    var ping = toPing[i];
                    planet.plugins.pings.add(ping.lng, ping.lat, {
                      // Here we use the `angles` and `colors` scales we built earlier
                      // to convert magnitudes to appropriate angles and colors.
                      angle: angles(ping.mag),
                      color: colors(ping.mag),
                      ttl:   ttls(ping.mag)
                    });
                  }
                  currentTime += dataDelta;
                  if (currentTime > end) currentTime = start;
                  updateDate();
                  d3.select('#slider').property('value', percentToDate.invert(currentTime));
                  lastTick = now;
                });
            });
        }
	};
  // Plugin to resize the canvas to fill the window and to
  // automatically center the planet when the window size changes
  function autocenter(options) {
    options = options || {};
    var needsCentering = false;
    var globe = null;
    var resize = function() {
      var width  = board_obj.offsetWidth;
      //var height = board_obj.offsetWidth;
	  //var width  = body_width;
      var height = body_height;
  
      globe.canvas.width = width;
      globe.canvas.height = height;
      globe.projection.translate([width / 2, height / 2]);
    };
    return function(planet) {
      globe = planet;
      planet.onInit(function() {
        needsCentering = true;
        d3.select(window).on('resize', function() {
          needsCentering = true;
        });
      });
      planet.onDraw(function() {
        if (needsCentering) { resize(); needsCentering = false; }
      });
    };
  };
  // Plugin to automatically scale the planet's projection based
  // on the window size when the planet is initialized
  function autoscale(options) {
    options = options || {};
    return function(planet) {
      planet.onInit(function() {
        //var width  = board_obj.offsetWidth;
        //var height = board_obj.offsetWidth;
        var width  = body_width;
        var height = body_height;
        planet.projection.scale(Math.min(width, height) / 2.3);
      });
    };
  };
  // Plugin to automatically rotate the globe around its vertical
  // axis a configured number of degrees every second.
  function autorotate(degPerSec) {
    return function(planet) {
      var lastTick = null;
      var paused = false;
      planet.plugins.autorotate = {
        pause:  function() { paused = true;  },
        resume: function() { paused = false; }
      };
      planet.onDraw(function() {
        if (paused || !lastTick) {
          lastTick = new Date();
        } else {
          var now = new Date();
          var delta = now - lastTick;
          var rotation = planet.projection.rotate();
          rotation[0] += degPerSec * delta / 1000;
          if (rotation[0] >= 180) rotation[0] -= 360;
          planet.projection.rotate(rotation);
          lastTick = now;
        }
      });
    };
  };
})();
</script>



